let xSpacing,ySpacing,waveWidth,amplitude,frequency,dx,sinValues,squareValues,triValues,sawValues,padding,wavePosition,pointWidth,dropThreshold,theta=0,speed=.02,dropSpeed=18;p5.disableFriendlyErrors=!0;let animHeight,animWidth,cnv;function setColors(){"undefined"==typeof colorSin&&(colorSin="#1abc9c"),"undefined"==typeof colorSquare&&(colorSquare="#bc1a7b"),"undefined"==typeof colorTri&&(colorTri="#bc3a1a"),"undefined"==typeof colorSaw&&(colorSaw="#bc9b1a")}function setWindow(){"undefined"==typeof parentId?(animHeight=windowHeight,animWidth=windowWidth):(animHeight=document.getElementById(parentId).clientHeight,animWidth=document.getElementById(parentId).clientWidth,cnv=createCanvas(animWidth,animHeight),cnv.parent(parentId))}function setup(){setColors(),setWindow(),setConstants()}function windowResized(){setWindow(),setConstants()}function setConstants(){waveWidth=width+16,xSpacing=floor(animWidth/40),ySpacing=floor(animHeight/5),padding=floor(animHeight/16),amplitude=floor(animHeight/20),pointWidth=Math.min(floor(.8*xSpacing),amplitude/3),frequency=3/waveWidth,dx=TWO_PI*frequency*xSpacing,dropThreshold=.97*PI,sawThreshold=.15*amplitude,wavePosition=padding+amplitude,sinValues=Array(floor(waveWidth/xSpacing)),squareValues=Array(floor(waveWidth/xSpacing)),triValues=Array(floor(waveWidth/xSpacing)),sawValues=Array(floor(waveWidth/xSpacing))}function draw(){background("#2c3e50"),calcSin(theta),calcSquare(theta),calcTri(theta),calcSaw(theta),renderWaves(),theta+=speed%TWO_PI}function calcSin(a){let b=a;for(let c=0;c<sinValues.length;c++)sinValues[c]=-(sin(b)*amplitude),b+=dx}function calcSquare(a){var b=Math.max,c=Math.min;let d=a%TWO_PI;for(let e=0;e<squareValues.length;e++)d>dropThreshold&&d<PI?(squareValues[e]+=speed*dropSpeed*amplitude,squareValues[e]=c(squareValues[e],amplitude)):d>2*dropThreshold&&d<TWO_PI?(squareValues[e]+=-speed*dropSpeed*amplitude,squareValues[e]=b(squareValues[e],-amplitude)):d>=PI?squareValues[e]=amplitude:squareValues[e]=-amplitude,d=(d+dx)%TWO_PI}function calcTri(a){let b=a%TWO_PI,c=2*amplitude/PI;for(let d=0;d<triValues.length;d++)triValues[d]=b<HALF_PI?-(c*b):b<PI?c*b-2*amplitude:b<3*HALF_PI?c*b-2*amplitude:-(c*b)+4*amplitude,b=(b+dx)%TWO_PI}function calcSaw(a){var b=Math.min;let c=a%TWO_PI,d=amplitude/PI;for(let e=0;e<sawValues.length;e++)c>dropThreshold&&c<PI?(sawValues[e]+=speed*dropSpeed*amplitude,sawValues[e]=b(sawValues[e],amplitude)):c<=PI?sawValues[e]=-(d*c):sawValues[e]=-(d*c-2*amplitude),c=(c+dx)%TWO_PI}function renderWaves(){renderSin(wavePosition,colorSin),renderSquare(wavePosition+ySpacing,colorSquare),renderTri(height-wavePosition-ySpacing,colorTri),renderSaw(height-wavePosition,colorSaw)}function renderSin(a,b){fill(color(b)),stroke(color(b));for(let c=0;c<sinValues.length;c++)ellipse(c*xSpacing,sinValues[c]+a,pointWidth,pointWidth)}function renderSquare(a,b){fill(color(b)),stroke(color(b));for(let c=0;c<sinValues.length;c++)ellipse(c*xSpacing,squareValues[c]+a,pointWidth,pointWidth)}function renderTri(a,b){fill(color(b)),stroke(color(b));for(let c=0;c<sinValues.length;c++)ellipse(c*xSpacing,triValues[c]+a,pointWidth,pointWidth)}function renderSaw(a,b){fill(color(b)),stroke(color(b));for(let c=0;c<sinValues.length;c++)ellipse(c*xSpacing,sawValues[c]+a,pointWidth,pointWidth)}